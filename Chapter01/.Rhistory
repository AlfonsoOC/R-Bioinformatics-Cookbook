ddsSE <- DESeqDataSet(summ_exp, design= ~ stage)
ddsSE
ddsSE <- DESeq(ddsSE)
resSE <- results(ddsSE, contrast=c("stage","L2Larvae","L1Larvae"))
resSE
res
pheno_data %>%
dplyr::filter(stage %in% experiments_of_interest )
grouping
View(grouping)
class(grouping$stage)
dds
counts_of_interest
grouping
counts_of_interest
dds
plot(resSE)
resSE
plot(resSE $log2FoldChange)
hist(resSE$log2FoldChange)
hist(resSE$log2FoldChange, breaks = 10)
hist(resSE$log2FoldChange, breaks = 20)
hist(resSE$log2FoldChange, breaks = 30)
hist(resSE$log2FoldChange, breaks = 50)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("bvieth/powsimR")
library(powsimR)
library(devtools)
devtools::install_github("bvieth/powsimR", build_vignettes = TRUE, dependencies = FALSE)
library("SAVER")
library(SAVER)
library(SAVER)
install.packages("SAVER")
library(SAVER)
devtools::install_github("bvieth/powsimR")
devtools::install_github("mohuangx/SAVER")
install.packages("glmnet", repos = "https://cran.us.r-project.org")
install.packages("conquer")
R.Version()
install.packages("conquer")
install.packages("conquer")
install.packages("glmnet", repos = "https://cran.us.r-project.org")
devtools::install_github("bvieth/powsimR")
install.packages("SAVER")
install.packages("SAVER")
-v
arab_data <- readRDS(file.path(getwd(), "datasets", "ch1", "arabidopsis.RDS" ))
arab_data <- readRDS(file.path(getwd(), "/..","datasets", "ch1", "arabidopsis.RDS" ))
means_mock <- rowMeans(arab_data[, c("mock1", "mock2", "mock3")]) #rowMeans function to get the mean exression of some columns
means_hrcc <- rowMeans(arab_data[, c("hrcc1", "hrcc2", "hrcc3")])
log2fc <- log2(means_hrcc / means_mock)
prop_de <- sum(abs(log2fc) > 2) / length(log2fc)
prop_de
finite_log2fc <-log2fc[is.finite(log2fc)] #remove the non finite ratios from log2fc
plot(density(finite_log2fc))
extRemes::qqnorm(finite_log2fc )
library(powsimR)
library(dplyr)
params <- estimateParam(
countData = arab_data,
Distribution = "NB",
RNAseq = "bulk",
normalisation = "TMM" # edgeR method, can be others
)
library(ggplot2)
Full_Table <- read.csv("~/Downloads/GeneralTable.csv")
Ratio_BC_Reads <- Full_Table$Reads_Average/Full_Table$BC_average
Full_Table <- cbind(Full_Table, Ratio_BC_Reads)
Full_Table$molecule_Number <- as.factor(Full_Table$molecule_Number)
Full_Table$BC_average
Full_Table %>%
ggplot(mapping=aes(x=ID, y=Reads_Average) ) +
geom_bar( stat="identity", position = position_stack(reverse=TRUE), alpha=0.7) +
geom_errorbar( aes(x=ID, ymin=Reads_Average-Reads_Error, ymax=Reads_Average+Reads_Error), width=0.4, colour="orange", alpha=0.9, size=1.3) +
ggtitle("Total BarCodes")
BC_Reads_Ratio <- Full_Table$BC_average/Full_Table$Reads_Average
Full_Table <- cbind(Full_Table, BC_Reads_Ratio)
NOBC_Reads_Ratio <- Full_Table$NO_BC_Average/Full_Table$Reads_Average
Full_Table <- cbind(Full_Table, NOBC_Reads_Ratio)
N2E3 <- read.csv("~/Downloads/NoPurif_2E3.csv")
Ratio_BC_Reads <- N2E3$Total_Reads/N2E3$Number.of.Barcodes
N2E3 <- cbind(N2E3, Ratio_BC_Reads)
Ratio_NOBC_Reads <- N2E3$NoBC_Reads/N2E3$Total_Reads
N2E3 <- cbind(N2E3, Ratio_NOBC_Reads)
N2E4 <- read.csv("~/Downloads/NoPurif_2E4.csv")
Ratio_BC_Reads <- N2E4$Total_Reads/N2E4$Number.of.Barcodes
N2E4 <- cbind(N2E4, Ratio_BC_Reads)
Ratio_NOBC_Reads <- N2E4$NoBC_Reads/N2E4$Total_Reads
N2E4 <- cbind(N2E4, Ratio_NOBC_Reads)
N4E4 <- read.csv("~/Downloads/NoPurif_4E4.csv")
Ratio_BC_Reads <- N4E4$Total_Reads/N4E4$Number.of.Barcodes
N4E4 <- cbind(N4E4, Ratio_BC_Reads)
Ratio_NOBC_Reads <- N4E4$NoBC_Reads/N4E4$Total_Reads
N4E4 <- cbind(N4E4, Ratio_NOBC_Reads)
N2E3$Total_Reads/N2E3$Number.of.Barcodes
ggplot(N2E3,aes(Total_Reads, Number.of.Barcodes))+
geom_line(aes(color="2000 Molecules"))+
geom_line(data=N2E4,aes(color="20 000 molecules"))+
geom_line(data=N4E4,aes(color="40 000 molecules"))+
labs(color="Legend text") +
xlab("Number of Reads") +
ylab("Number of Barcodes") +
ggtitle("Influence of number of molecules in number of barcodes obtained")
Full_Table  %>%
ggplot(mapping=aes(x=molecule_Number, y=Ratio_BC_Reads, color=Sample)) +
geom_jitter(stat="identity", position = "dodge", alpha=0.7) +
ggtitle("efect molecule Number in ratio BC/Reads number")+
geom_line()
General_table <- read.csv("~/Downloads/All_Statistics.csv")
General_table$Sample <- as.factor(General_table$Sample)
DF <- as.matrix(read.csv("Documents/prueba.csv"))
DF <- read.csv("Documents/prueba.csv")
class(DF)<-"numeric"
heatmap(DF, Colv=NA, Rowv=NA)
DF <- as.matrix(read.csv("Documents/prueba.csv"))
DF <- read.csv("Documents/prueba.csv")
lista <- vector(mode = "list", length = 2)
lista[[1]] <- c(1,30,100,7666,78684,82646,50)
lista[[2]] <-c(78670,5, 1027374,8788876,192837)
lista
a <- c(3, 78680)
resultado<- vector(mode = "list", length = length(a))
apuntador=0
for(i in 1:length(lista)){
print(c("i=",i))
for(j in 1:length(a)){
print(c("j=",j))
print(apuntador)
apuntador<- which.min(abs(lista[[i]]-a[j]))
resultado <- lista[[i]][apuntador]
}
}
resultado
for(i in 1:length(lista)){
print(c("i=",i))
for(j in 1:length(a)){
print(c("j=",j))
print(apuntador)
apuntador<- which.min(abs(lista[[i]]-a[j]))
resultado <- lista[[i]][apuntador]
}
}
library(Biostrings)
library(BiocGenerics)
library(parallel)
library(seqinr)
library(DECIPHER)
library(RSQLite)
BC2 <- seqinr::read.fasta("BC1.fasta.gz")[1:500]
View(BC2)
library(ggplot2)
Full_Table <- read.csv("~/Downloads/GeneralTable.csv")
Ratio_BC_Reads <- Full_Table$Reads_Average/Full_Table$BC_average
Full_Table <- cbind(Full_Table, Ratio_BC_Reads)
Full_Table$molecule_Number <- as.factor(Full_Table$molecule_Number)
Full_Table$BC_average
Full_Table %>%
ggplot(mapping=aes(x=ID, y=Reads_Average) ) +
geom_bar( stat="identity", position = position_stack(reverse=TRUE), alpha=0.7) +
geom_errorbar( aes(x=ID, ymin=Reads_Average-Reads_Error, ymax=Reads_Average+Reads_Error), width=0.4, colour="orange", alpha=0.9, size=1.3) +
ggtitle("Total BarCodes")
BC_Reads_Ratio <- Full_Table$BC_average/Full_Table$Reads_Average
Full_Table <- cbind(Full_Table, BC_Reads_Ratio)
NOBC_Reads_Ratio <- Full_Table$NO_BC_Average/Full_Table$Reads_Average
Full_Table <- cbind(Full_Table, NOBC_Reads_Ratio)
N2E3 <- read.csv("~/Downloads/NoPurif_2E3.csv")
Ratio_BC_Reads <- N2E3$Total_Reads/N2E3$Number.of.Barcodes
N2E3 <- cbind(N2E3, Ratio_BC_Reads)
Ratio_NOBC_Reads <- N2E3$NoBC_Reads/N2E3$Total_Reads
N2E3 <- cbind(N2E3, Ratio_NOBC_Reads)
N2E4 <- read.csv("~/Downloads/NoPurif_2E4.csv")
Ratio_BC_Reads <- N2E4$Total_Reads/N2E4$Number.of.Barcodes
N2E4 <- cbind(N2E4, Ratio_BC_Reads)
Ratio_NOBC_Reads <- N2E4$NoBC_Reads/N2E4$Total_Reads
N2E4 <- cbind(N2E4, Ratio_NOBC_Reads)
N4E4 <- read.csv("~/Downloads/NoPurif_4E4.csv")
Ratio_BC_Reads <- N4E4$Total_Reads/N4E4$Number.of.Barcodes
N4E4 <- cbind(N4E4, Ratio_BC_Reads)
Ratio_NOBC_Reads <- N4E4$NoBC_Reads/N4E4$Total_Reads
N4E4 <- cbind(N4E4, Ratio_NOBC_Reads)
N2E3$Total_Reads/N2E3$Number.of.Barcodes
ggplot(N2E3,aes(Total_Reads, Number.of.Barcodes))+
geom_line(aes(color="2000 Molecules"))+
geom_line(data=N2E4,aes(color="20 000 molecules"))+
geom_line(data=N4E4,aes(color="40 000 molecules"))+
labs(color="Legend text") +
xlab("Number of Reads") +
ylab("Number of Barcodes") +
ggtitle("Influence of number of molecules in number of barcodes obtained")
Full_Table  %>%
ggplot(mapping=aes(x=molecule_Number, y=Ratio_BC_Reads, color=Sample)) +
geom_jitter(stat="identity", position = "dodge", alpha=0.7) +
ggtitle("efect molecule Number in ratio BC/Reads number")+
geom_line()
General_table <- read.csv("~/Downloads/All_Statistics.csv")
General_table$Sample <- as.factor(General_table$Sample)
General_table$Total_Reads
Ratio_BC_Reads <- General_table$Total_Reads/General_table$Number.of.Barcodes
General_table <- cbind(General_table, Ratio_BC_Reads)
General_table %>%
ggplot(mapping=aes(x=Sample, y=Ratio_BC_Reads) ) +
geom_jitter( stat="identity", position = position_stack(reverse=TRUE), alpha=0.7) +
ggtitle("Total BarCodes")
Ratio_BC_Reads <- Full_Table$Reads_Average/Full_Table$BC_average
Full_Table <- cbind(Full_Table, Ratio_BC_Reads)
Full_Table$molecule_Number
ggplot(Full_Table, aes(molecule_Number, BC_average))+
geom_line(aes(color="First line"))
library(DESeq2)
library(magrittr)
library(ggplot2)
dds <- readRDS(file.path( getwd(), "datasets", "ch1","modencode_dds.RDS") )
dds <- readRDS(file.path( getwd(),"/..", "datasets", "ch1","modencode_dds.RDS") )
plotCounts(dds, gene="FBgn0000014", intgroup = "stage", returnData = TRUE) %>%
ggplot() + aes(stage, count) + geom_boxplot(aes(fill=stage)) + scale_y_log10() + theme_bw()
result_df <- results(dds, contrast=c("stage","L2Larvae","L1Larvae"), tidy= TRUE) %>%
dplyr::mutate(is_significant=padj<0.05)
ggplot(result_df) + aes(baseMean, log2FoldChange) + geom_point(aes(colour=is_significant)) + scale_x_log10() + theme_bw()
ggplot(result_df) + aes(log2FoldChange, -1 * log10(pvalue))  + geom_point(aes(colour=is_significant)) + theme_bw()
##Create a boxplot of counts for a single gene, conditioned on "stage":
dds <- readRDS(file.path( getwd(),"/..", "datasets", "ch1","modencode_dds.RDS") )
plotCounts(dds, gene="FBgn0000014", intgroup = "stage", returnData = TRUE) %>%
ggplot() + aes(stage, count) + geom_boxplot(aes(fill=stage)) + scale_y_log10() + theme_bw()
result_df
ggplot(result_df) + aes(baseMean, log2FoldChange) + geom_point(aes(colour=is_significant)) + scale_x_log10() + theme_bw()
ggplot(result_df) + aes(log2FoldChange, -1 * log10(pvalue))  + geom_point(aes(colour=is_significant)) + theme_bw()
library(GenomicRanges)
library(gmapR)
library(rtracklayer)
library(VariantAnnotation)
library(VariantTools)
bam_folder <- file.path(getwd(), "/..","datasets", "ch2")
bam_file <- file.path( bam_folder, "hg17_snps.bam")
fasta_file <- file.path(bam_folder,"chr17.83k.fa")
fa <- rtracklayer::FastaFile(fasta_file)
View(fa)
fa
genome <- gmapR::GmapGenome(fa, create=TRUE)
GmapGenome(fa, create=TRUE)
qual_params <- TallyVariantsParam(
genome = genome,
minimum_mapq = 20)
var_params <- VariantCallingFilters(read.count = 19,
p.lower = 0.01
)
VariantAnnotation::sampleNames(called_variants) <- "sample_name"
vcf <- VariantAnnotation::asVCF(called_variants)
VariantAnnotation::writeVcf(vcf, "hg17.vcf")
BiocManager::install("gmapR")
BiocManager::install("gmapR")
BiocManager::install("gmapR", force = TRUE)
library(gmapR)
BiocManager::install("karyoploteR")
BiocManager::install("karyoploteR")
library(karyoploteR)
BiocManager::install("systemPipeR")
BiocManager::install("VariantTools")
install.packages(rrBLUP)
install.packages("rrBLUP")
library(gmapR)
genome <- gmapR::GmapGenome(fa, create=TRUE)
genome
qual_params <- TallyVariantsParam(
genome = genome,
minimum_mapq = 20)
##Finding SNPs and indels from sequence data using VariantTools
library(GenomicRanges)
library(rtracklayer)
library(VariantAnnotation)
library(VariantTools)
qual_params <- TallyVariantsParam(
genome = genome,
minimum_mapq = 20)
var_params <- VariantCallingFilters(read.count = 19,
p.lower = 0.01
)
called_variants <- callVariants(bam_file,
qual_params,
calling.filters = var_params
)
head(called_variants)
VariantAnnotation::sampleNames(called_variants) <- "sample_name"
vcf <- VariantAnnotation::asVCF(called_variants)
VariantAnnotation::writeVcf(vcf, "hg17.vcf")
get_annotated_regions_from_gff <- function(file_name) {
gff <- rtracklayer::import.gff(file_name)
as(gff, "GRanges")
}
get_annotated_regions_from_bed <- function(file_name){
bed <- rtracklayer::import.bed(file_name)
as(bed, "GRanges")
}
genes <- get_annotated_regions_from_gff(file.path( bam_folder, "chr17.83k.gff3"))
overlaps <- GenomicRanges::findOverlaps(called_variants, genes)
overlaps
genes[subjectHits(overlaps)]
extracted_orfs
library(karyoploteR)
library(GenomicRanges)
genome_df <- data.frame(
chr = paste0("chr", 1:5),
start = rep(1, 5),
end = c(34964571, 22037565, 25499034, 20862711, 31270811)
)
genome_df
genome_gr <- makeGRangesFromDataFrame(genome_df)
genome_gr
snp_pos <- sample(1:1e7, 25)
snp_pos
snps <- data.frame(
chr = paste0("chr", sample(1:5,25, replace=TRUE)),
start = snp_pos,
end = snp_pos
)
snps
snps_gr <- makeGRangesFromDataFrame(snps)
snps_gr
snp_labels <- paste0("snp_", 1:25)
snp_labels
plot.params <- getDefaultPlotParams(plot.type=1)
plot.params$data1outmargin <- 600
plot.params
kp <- plotKaryotype(genome=genome_gr, plot.type = 1, plot.params = plot.params)
kp
kpPlotMarkers(kp, snps_gr, labels = snp_labels)
numeric_data <- data.frame(
y = rnorm(100,mean = 1,sd = 0.5  ),
chr = rep("chr4", 100),
start = seq(1,20862711, 20862711/100),
end = seq(1,20862711, 20862711/100)
)
numeric_data_gr <- makeGRangesFromDataFrame(numeric_data)
plot.params <- getDefaultPlotParams(plot.type=2)
plot.params$data1outmargin <- 800
plot.params$data2outmargin <- 800
plot.params$topmargin <- 800
kp <- plotKaryotype(genome=genome_gr, plot.type = 2, plot.params = plot.params)
kpPlotMarkers(kp, snps_gr, labels = snp_labels)
kpLines(kp, numeric_data_gr, y = numeric_data$y, data.panel=2)
kpPlotMarkers(kp, snps_gr, labels = snp_labels)
kpPlotMarkers(kp, snps_gr, labels = snp_labels)
##2 Then, set up the genome object that will be the base for our karyotype:
genome_df <- data.frame(
chr = paste0("chr", 1:5),
start = rep(1, 5),
end = c(34964571, 22037565, 25499034, 20862711, 31270811)
)
genome_df
### extrapanels
#The following example shows how to draw some numeric data onto a plot as a simple line.
#Here, we create a data.frame that has 100 random numbers that map into 100 windows of chromosome 4 and, as before, we create a GRanges object.
numeric_data <- data.frame(
y = rnorm(100,mean = 1,sd = 0.5  ),
chr = rep("chr4", 100),
start = seq(1,20862711, 20862711/100),
end = seq(1,20862711, 20862711/100)
)
numeric_data_gr <- makeGRangesFromDataFrame(numeric_data)
#This time, we'll have a data track above and below our chromosome—one for SNP markers and the other for the new data (note that this is plot.type = 2).
plot.params <- getDefaultPlotParams(plot.type=2)
#This time, we'll have a data track above and below our chromosome—one for SNP markers and the other for the new data (note that this is plot.type = 2).
plot.params <- getDefaultPlotParams(plot.type=2)
#We then need to set the parameters for the plo—in particular, the margins, to stop labels and data overlapping; but after that, it's the same plot calls, this time adding a kpLines() call.
plot.params$data1outmargin <- 800
plot.params$data2outmargin <- 800
plot.params$topmargin <- 800
kp <- plotKaryotype(genome=genome_gr, plot.type = 2, plot.params = plot.params)
numeric_data
kpPlotMarkers(kp, snps_gr, labels = snp_labels)
kpLines(kp, numeric_data_gr, y = numeric_data$y, data.panel=2)
vignette("karyoploteR")
library(VariantAnnotation)
is_not_microsat <- function(x){ !grepl("microsat", x, fixed = TRUE)}
prefilters <- FilterRules(list(microsat = is_not_microsat) )
major_alt <- function(x){
af <- info(x)$AF ## also geno() fixed()
result <- unlist(lapply(af, function(x){x[1] < 0.5}))
return(result)
}
filters <- FilterRules(list(alt_is_major = major_alt))
vcf_file <- file.path(getwd(), "/..","datasets", "ch2", "sample.vcf.gz")
filterVcf(vcf_file, "hg17", "filtered.vcf", prefilters = prefilters, filters = filters)
vcf_file
filterVcf(vcf_file, "hg17", "filtered.vcf", prefilters = prefilters, filters = filters)
##6 Load the input VCF file and apply filters:
vcf_file <- file.path(getwd(), "/..","datasets", "ch2", "sample.vcf.gz")
filterVcf(vcf_file, "hg17", "filtered.vcf", prefilters = prefilters, filters = filters)
library(GenomicRanges)
library(rtracklayer)
library(SummarizedExperiment)
get_granges_from_gff <- function(file_name) {
gff <- rtracklayer::import.gff(file_name)
as(gff, "GRanges")
}
get_granges_from_bed <- function(file_name){
bed <- rtracklayer::import.bed(file_name)
as(bed, "GRanges")
}
get_granges_from_text <- function(file_name){
df <- readr::read_tsv(file_name, col_names = TRUE )
GenomicRanges::makeGRangesFromDataFrame(df, keep.extra.columns = TRUE)
}
get_annotated_regions_from_gff <- function(file_name) {
gff <- rtracklayer::import.gff(file_name)
as(gff, "GRanges")
}
gr_from_gff <- get_annotated_regions_from_gff(file.path(getwd(),"/..", "datasets", "ch2", "arabidopsis_chr4.gff"))
gr_from_txt <- get_granges_from_text(file.path(getwd(), "/..","datasets", "ch2", "arabidopsis_chr4.txt"))
## Extract by seqname or metadata
genes_on_chr4 <- gr_from_gff[ gr_from_gff$type == "gene" & seqnames(gr_from_gff) %in% c("Chr4") ]
region_of_interest_gr <- GRanges(
seqnames = c("Chr4"),
IRanges(c(10000), width= c(1000))
)
overlap_hits <- findOverlaps(region_of_interest_gr, genes_on_chr4)
features_in_region <- genes_on_chr4[subjectHits(overlap_hits) ]
features_in_region
set.seed(4321)
experiment_counts <- matrix( runif(4308 * 6, 1, 100), 4308)
sample_names <- c(rep("ctrl",3), rep("test",3) )
se <- SummarizedExperiment::SummarizedExperiment(rowRanges = gr_from_txt, assays = list(experiment_counts), colData = sample_names)
overlap_hits <- findOverlaps(region_of_interest_gr, se)
data_in_region <- se[subjectHits(overlap_hits) ]
assay(data_in_region)
gr_from_gff
gr_from_txt
genes_on_chr4
region_of_interest_gr
overlap_hits
features_in_region
experiment_counts
sample_names
se
overlap_hits
data_in_region
assay(data_in_region)
library(VariantAnnotation)
library(rrBLUP)
vcf_file <- file.path(getwd(),"/..", "datasets", "ch2", "small_sample.vcf")
vcf <- readVcf(vcf_file, "hg19")
gts <- geno(vcf)$GT
samples <- samples(header(vcf))
markers <- rownames(gts)
chrom <- as.character(seqnames(rowRanges(vcf)))
pos <- as.numeric(start(rowRanges(vcf)))
convert <- function(v){
v <- gsub("0/0", 1, v)
v <- gsub("0/1", 0, v)
v <- gsub("1/0", 0, v)
v <- gsub("1/1",-1, v)
return(v)
}
gt_char<- apply(gts, convert, MARGIN = 2)
genotype_matrix <- matrix(as.numeric(gt_char), nrow(gt_char) )
colnames(genotype_matrix)<- samples
variant_info <- data.frame(marker = markers,
chrom = chrom,
pos = pos)
genotypes <-  cbind(variant_info, as.data.frame(genotype_matrix))
genotypes
phenotypes <- data.frame(
line = samples,
score = rnorm(length(samples))
)
phenotypes
GWAS(phenotypes, genotypes,plot=FALSE)
GWAS(phenotypes, genotypes,plot=T)
library(csaw)
whole_genome <- csaw::windowCounts(
file.path(getwd(),"/..", "datasets", "ch2", "hg17_snps.bam"),
bin = TRUE,
filter = 0,
width = 100,
param = csaw::readParam(
minq = 20,
dedup = TRUE,
pe = "both"
)
)
colnames(whole_genome) <- c("h17")
counts <- assay(whole_genome)[,1]
min_count <- quantile(counts, 0.1)[[1]]
counts[counts < min_count] <- NA
n <- length(counts)
doubled_windows <- 10
left_pad <- floor( (n/2) - doubled_windows )
right_pad <- n - left_pad -doubled_windows
multiplier <- c(rep(1, left_pad ), rep(2,doubled_windows), rep(1, right_pad) )
counts <- counts * multiplier
mean_cov <- mean(counts, na.rm=TRUE)
ratio <- matrix(log2(counts / mean_cov), ncol = 1)
plot(ratio)
se <- SummarizedExperiment(assays=list(ratio), rowRanges= rowRanges(whole_genome), colData = c("CoverageRatio"))
region_of_interest <- GRanges(
seqnames = c("NC_000017.10"),
IRanges(c(40700), width = c(1500) )
)
overlap_hits <- findOverlaps(region_of_interest, se)
data_in_region <- se[subjectHits(overlap_hits)]
assay(data_in_region)
devtools::install_github("DillonHammill/rhandsontable")
install_github("DillonHammill/DataEditR")
library(devtools)
install_github("DillonHammill/DataEditR")
library(DataEditR)
mpg
mpg_subset <- data_edit(x=mpg)
DataEditR:::data_edit()
install.packages("esquisse")
esquisse::esquisser()
